// Generated by CoffeeScript 1.3.3
(function() {
  var acceptableTimeout, assert, driverOptions, rootURL, setElementValueByCss, webdriver;

  webdriver = require("wd");

  assert = require("assert");

  rootURL = "https://hapi-cms-dev.herokuapp.com/";

  driverOptions = {
    browserName: "firefox"
  };

  acceptableTimeout = 10000;

  describe("HAPI CMS", function() {
    return describe("homepage", function() {
      it("should accept valid login details", function() {
        var finished, loginComplete, pazzwrd, username;
        finished = false;
        username = "owner";
        pazzwrd = "HuzuRocks!";
        loginComplete = false;
        runs(function() {
          var driver;
          driver = webdriver.remote();
          return driver.init(driverOptions, function(err, sessionid) {
            return driver.get(rootURL, function(err) {
              return driver.frame(0, function(err) {
                return setElementValueByCss(driver, "#Username", username, function() {
                  return setElementValueByCss(driver, "#Password", pazzwrd, function() {
                    return driver.elementByCss("#login-btn", function(err, element) {
                      return element.click(function(err) {
                        console.log("got here");
                        return driver.frame(null, function() {
                          return driver.waitForVisibleByCss("div.home", acceptableTimeout, function(err) {
                            if (!err) {
                              loginComplete = true;
                            }
                            finished = true;
                            return driver.quit();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
        waitsFor(function() {
          return finished;
        }, "login sequence to complete", acceptableTimeout);
        return runs(function() {
          return expect(loginComplete).toBe(true);
        });
      });
      return it("should reject invalid login details", function() {
        var errorMessageVisible, finished, pazzwrd, username;
        finished = false;
        username = "ebeneezer";
        pazzwrd = "good";
        errorMessageVisible = false;
        runs(function() {
          var driver;
          driver = webdriver.remote();
          return driver.init(driverOptions, function(err, sessionid) {
            return driver.get(rootURL, function(err) {
              return driver.frame(0, function(err) {
                return setElementValueByCss(driver, "#Username", username, function() {
                  return setElementValueByCss(driver, "#Password", pazzwrd, function() {
                    return driver.elementByCss("#login-btn", function(err, element) {
                      return element.click(function(err) {
                        return driver.waitForVisibleByCssSelector("#validation-message", acceptableTimeout, function(err) {
                          return driver.waitForVisibleByCssSelector("span.field-validation-error", acceptableTimeout, function(err, validationError) {
                            if (!err) {
                              errorMessageVisible = true;
                            }
                            finished = true;
                            return driver.quit();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
        waitsFor(function() {
          return finished;
        }, "server to reject login attempt", acceptableTimeout);
        return runs(function() {
          return expect(errorMessageVisible).toBe(true);
        });
      });
    });
  });

  setElementValueByCss = function(webDriver, cssSelector, value, callback) {
    try {
      return webDriver.elementByCss(cssSelector, function(err, element) {
        return webDriver.type(element, value, function(err) {
          return callback();
        });
      });
    } catch (exc) {
      return console.log("Error setting value of page element: " + exc.message);
    }
  };

}).call(this);
